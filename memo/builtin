- 이전의 경우 성공하면 0 을 리턴 했는데 그러면 true false 체크 하기 힘들어서
    그냥 ERROR, success 로 상수값으로 리턴하도록 했음

◦ echo with option ’-n’                         : o
◦ cd with only a relative or absolute path      : o 기본적인 이동은 구현되어 있음
                                                    .., ., ~, - 같은 것들 구현해야하나?
◦ pwd without any options                       : o
◦ export without any options                    : o
◦ unset without any options                     : o 지워지기는 한데 밑에 기능 참고하고 
                                                    없는 기능 새로 넣어야할지 생각해보기
◦ env without any options and any arguments     : x 현재 조회만 되고 설정 기능이 없는 상태
◦ exit without any options                      : o 

# 현재 상항
    팀원이 sancho 님이
    char *str 데이터 형으로 함수들을 만들어 놨음
    빌트인 함수들이 인자가 하나밖에 없어서 그런건가?


# export
    - bourne shell(=sh) builtin
    ```
    export [-fn] [name[=value] ...] or export -p
    ```

    - 시용자 환경변수를 전역 변수로 설정
    
    A.sh 스크립트 내에서 B.sh 스크립트를 실행시키면 A.sh 는 부모 프로세스 B.sh 는 자식 프로세스가 된다.
    이떄 A.sh 에서 설정한 변수, 함수들은 B.sh 에서 사용할 수가 없는데 export 명령을 이용하면 child process 인
    B.sh 에서도 사용할 수 있게 된다.


    - 여러 인자를 받을 수 있는데 인자 하나당 하나의 환경변수로 생각한다.
        ### 인자 하나당 규칙
            name 값을 주지않고 export 만 실행하면 export 된 값을 출력한다.
            변수가 =Value 형태로 입력될 경우 변수는 Value 값으로 설정된다.
            유효하지 않은 옵션이 제공되지만 않는다면 0 을 리턴한다.

    export + something
        name=value
            목록에 name 있는지 없는지 확인
                o
                    value 로 수정
                x
                    새로 추가
        name= or name="" or name=''
            목록에 name 있는지 없는지 확인
                o
                    아무일도 없음
                x
                    NULL, 빈문자열
        name
            목록에 name 있는지 없는지 확인
                o
                    아무일도 없음
                x
                    NULL, 빈문자열

# echo
    - Bash builtin 
    ```
    echo [-neE] [arg …]
    ```
    - arg 들을 출력한다.
    - space 로 나뉘어진다.
        quote 를 사용하지 않을 경우 whitespace 문자들은 single sapce 로 변경된다.
        기본적으로 space 한칸씩 구분된다.
    - 개행으로 종료된다.

    리턴 
        성공 : 0

    옵션
        -n : 개행을 하지 않고 출력
            -n 옵션 내용상에서
                -nnnnnnn : n 옵션 적용
                -nmmmmm : n 옵션 적용 x
                -n 옵션이 뒤에 나올 경우 적용 안된다.

# cd
```
cd [-L|[-P [-e]] [-@] [directory]
```
- 현재 작업중인 디렉토리를 변경한다.
- 경로가 제공되지 않으면 shell 의 HOME 변수 값이 사용된다.
- directory 이후에 나오는 추가적인 인자들은 무시된다.

- directory 에서 '..' 가 있을 경우 바로 앞의 pathname 요소를 제거하여 슬래시 또는 디렉토리의 시작부분으로 처리된다. 
- directory 를 찾을 수 없을 경우 셸 옵션인 cdable_vars 가 설정되고 변수 이름으로 판단한다. 변수가 앖이 있을 경우 해당 값을 경로로 판단한다.

    ### mininshell
    - 상대경로, 절대경로 만 있는 cd
    - CDPATH 는 사용 안하는 듯 하다.
    - cdabe_vasr 는 안써도될듯 상대경로 절대경로만 쓰라고 했으니까.

    If ‘..’ appears in directory, it is processed by removing the immediately preceding pathname component, back to a slash or the beginning of directory..

    The return status is zero if the directory is successfully changed, non-zero otherwise.

    ### hard link, symbolic link, relative path, absolute path

    ## 유닉스
    
        > 유닉스 파일 시스템은 디스크 파티션이 하나인 것과 비슷 하다고함. 
        ### 유닉스의 파일 종류 
            1. 일반 파일
                : 텍스트 파일, 실팽파일 등 텍스트, 바이너리 형태의 데이터를 저장하고 있는 파일
            2. 특수파일
                : 장치를 실행하는데 사용
            3. 디렉토리
                : 해당 디렉토리에 속한 파일을 관리하는 특별한 파일
                : 유닉스에서 디렉토리도 파일로 취급한다.
        ### 유닉스에서 파일 구성
            1. file name
                사용자가 파일에 접근할 때 사용
            2. inode
                - 외부적으로는 번호로 표시
                - data block 의 위치를 나타내는 주소들이 저장되어 있음
                -> 파일의 정보를 inode 에서 읽어옴
                -> 파일의 종류, 접근권한, 하드 링크 개수, 소유자의 UID GID, 파일 크기, 파일 접근 시각 등
                <sys/stat.h> 파일의 stat 구조체에 저장된다. 
                - ls -l 명령의 경우 파일의 indoe 정보를 읽어서 출력한다고 함.
            3. data block
                파일 소유자, 크기 등 파일에 관한 정보, 파일의 실제 데이터를 저장
                하드디스크 공간이라고 생각하면 됨.
        ### 링크
            - 기존 파일이나 디렉토리에 접근할 수 있는 새로운 이름
                파일명이 복잡할떄 간단하게 파일에 접근할 수 있도록
                플랫폼이 다양할 경우 통일해서 피일에 접근할 수 있도록
            => 같은 파일이나 디렉토리를 여러 이름으로 접근할 수 있도록 !
            => ln 명령으로 등록할 수 있는데 프로그램 상에서도 함수로 구현 가능 
            - 종류
                하드링크    : 기존 파일과 동일한 indoe 사용
                심볼릭 링크 : 기존 파일에 접근할 수 있는 새로운 파일을 만듬, 기존 파일과 다른 indoe
        ### 디렉토리
            - [참고 사이트](http://teaching.idallen.com/dat2330/04f/notes/links_and_inodes.html)
             1. < 디렉토리는 하드 링크를 가질 수 없다. >
                > 유닉스의 경우 파일에게 여러 이름(link) 를 가질 수 있게 한다.  => 디렉토리는 아님 
                모든 하위 디렉토리는 하나의 부모 디렉토리만 가질 수 있어서.
                디렉토리가 하위 디레토리를 가질 경우 하위 디렉토리에서 '..' 은 항상 유일한 부모 디렉토리 만을 참조한다고 함.
            2. < 모든 디렉토리의 최소 링크 수는 2개 >
                '.' (dot= 디렉토리 자신을 의미) 과 이름
        ### mininshell 사용가능한 외부 함수들
            1. stat
            ```
            #include <sys/stat.h>
            int stat(const	char * restrict	path, struct stat * restrict sb);
            // path : 알고자 하는 파일 명
            // sb   : 검색한 파일 정보를 저장할 구조체 주소
            ```
            - inode 의 정보를 검색하는데 사용

            2. fstat
            ```
            #include <sys/stat.h>
            int fstat(int fildes, struct stat *buf);
            // fildes   : 열려 있는 파일의 fd
            // buf      : 정보를 저장할 구조체
            ```
            - stat() 과 달리 파일 기술자를 인자로 받아 파일 정보를 검색하고 buf 에 저장
            
            3. lstat
            ```
            #include <sys/stat.h>
            int lstat(const char *restrict path, struct stat *restrict buf);
            // path : 심볼릭 링크 경로
            // buf  : 정보를 저장할 구조체
            ```
            - 심볼릭 링크의 정보 검색

            4. chdir
            ```
            #include <unistd.h>
            int chdir(const char *path);
            ```
            - 디렉토리를 이동하는데 사용한다.
            - 절대경로, 상대 경로 모두 사용할 수 있다.
            - 성공 : 0 실패 : -1


# pwd

- 현재 작업 디렉토리를 출력
- 내부 변수인 $PWD 의 값을 읽는 것과 동일하다.
    [ getcwd() ]
    ```
    char *getcwd(char *buf, size_t size);
    ```
    - 현재 작업 경로의 절대 경로를 buf 에 복사한다.
    - return 
        success : pathname pointer
        error   : NULL, errno 설정
             [EINVAL]           The size argument is zero.

     [ENOENT]           A component of the pathname no longer exists.

     [ENOMEM]           Insufficient memory is available.

     [ERANGE]           The size argument is greater than zero but smaller than the length of the pathname
                        plus 1.

     The getcwd() function may fail if:

     [EACCES]           Read or search permission was denied for a component of the pathname.  This is only
                        checked in limited cases, depending on implementation details.

# unset
    - 현재 설정되어있는 변수나 함수를 삭제하여 존재하지 않는 상태로 만듭니다.
    - AA=, AA="", AA='' 은 값은 NULL 이지만 존재하는 변수이기 때문에 삭제할 수 있다.
    - AA=value 일 경우 AA 의 값이 value 인 것을 찾아 삭제하는 것 같다.
    - AA 일 경우 name 이 AA 인것을 삭제하는 것 같다.
    ```
    unset [-f] [-v] [-n] [name ...]
    ```
    ### mininshell
    - 옵션없이 unset 기능만

# env
    env [OPTION]... [-] [NAME=VALUE]... [COMMAND [ARG]...]
    - 전역변수 설정 및 조회
    - NAME 을 VALUE 로 설정 하고 COMMAND 를 실행한다.

    ### mininshell
    - without any options and any arguments
    > 옵션과 인자없이 env 만 딱 있을때를 말하는 것 같다. 


# exit
    - [참고 사이트](https://www.google.com/url?client=internal-element-cse&cx=002661009167463862046:hvjaxqjlo3q&q=https://www.joinc.co.kr/w/man/3/exit&sa=U&ved=2ahUKEwjW05Knzr7tAhUryIsBHa4WBAIQFjAAegQIAhAB&usg=AOvVaw0A_pxcskBU3gTb0CuewTOB)
    - shell 종료
        | (파이프) 에서 사용될 경우 파이프 안의 명령어들은 서브셸(자식프로세스)에서 
        실행되기 때문에 자식 프로세스들을 종료하는 것 같다.
    - n 옵션이 있을 경우 exit status 는 n 으로 설정된다.
    - n 옵션이 없을 경우 마지막 명령어가 실행된 걸로 설정됨

    ? 동적 할당된 메모리의 수명은 ?