
# 파이프
    ## 유닉스 시스템 프로그래밍에서
        - 두 프로세스 간에 통신을 할 수 있도록 인터페이스를 제공한다.
        - 보통 그냥 파이프라고 하면 이름 없는 파이프를 의미한다.
        
        ### 이름없는 파이프
            - 부모-지삭 프로세스 간에 통신을 할 수 있게 해준다.
            - 부모 프로세스에서 fork 함수를 사용해 자식 프로세스를 생성하고, 부모 프로세스와 자식 프로세스간에 통
            - 파이프는 기본적으로 단방향이다.
            - 부모 프로세스가 출력한 내용을 자식 프로세스가 읽을 것인지, 자식 프로세스가 출력한 내용을 부모 프로세스가 읽을 것인지 결정해야한다.

            #### 간단하게 만들기
                - popen 함수로 파이프를 생성하고 pclose 함수로 파이프를 닫아준다.
            
            #### 복잡하게 만들기
                - popen 함수로 간단하게 파이프를 생성할 수 있지만 셸을 사용해야하는 단점이 있다.

                ```
                #include <unistd.h>
                int pipe(int fildes[2]);
                // fildes[2] : 파이프로 사용할 파일 기술자 2개
                ```
                fildes[0] 은 읽기전용, fildes[1] 은 쓰기 전용
                성공시 0, 실패시 -1 리턴
            
            #### pipe() 함수로 통신하는 과정

                파이프를 생성하고 나면 알빈적으로 fork 함수를 호출해 자식 프로세스를 생성한다.
                자식 프로세스는 부모 프로세스가 pipe 함수로 생성한 fd 들도 복사한다.
                이 파이프를 이용해 한 프로세스에는 쓰기를 다른 프로세스에서는 읽기를 수행하며 통신을 하면 된다.

                1. pipe 함수를 호출해 파이프에 사용할 fd 를 얻는다.
                    - 파이프도 파일의 일종이기 때문에 파일(파이프)를 읽고 쓸 fd 가 필요하므로 pipe 함수가 생성해준다.
                2. fork 함수를 호출해 자식프로세스를 생성한다.
                    - 1 에서 생성한 파이프와 fd 가 자식프로세스에 복사되어 부모, 자식 모두 가지게 된다.
                3. 파이프는 당방향 통신이기 떄문에 통신 방향을 정해준다.
                    - 부모에서 쓰기 자식에서 읽기를 한다고 하면 부모에서는 fildes[0], 자식에서는 fildes[1] 을 닫아준다.
                        부모에서 쓴다음 자식에서 읽어주면 된다.

                
                파이프에서 빌트인 명령이 있을 경우는 자식프로세스를 생성하지 않는데 어떻게 통신하지?
                    Each command in a pipeline is executed in its own subshell, 
                    which is a separate process (see Command Execution Environment). 
                    If the lastpipe option is enabled using the shopt builtin 
                    (see The Shopt Builtin), 
                    the last element of a pipeline may be run by the shell process.
                    파이프라인에서 각 명령어는 자신의 서브셸에서 실행된다고 한다. (개별적인 프로세스)
                리다이렉션에서는 모든 명령어에서 fork 를 사용하는가? (파이프도 동일하게 궁금함)

    ## 좀비 프로세스
        - 정상적인 프로세스 종료 과정일경우 자식 프로세스가 종료상태를 보내면 부모 프로세스는 이를 받아
          프로세스 테이블에서 자식 프로세스를 삭제한다.
        - 자식 프로세스가 모든 자원을 반납했어도 부모 프로세스가 종료 상태값을 받지 않거나
          자식 프로세스보다 먼저 종료할 경우 좀비프로세스가 발생한다.
        - 자식 프로세스가 전달한 종료상태 값은 부모 프로세스에 왼쪽으로 한바이트 이동해 전달되기 떄문에 256 을 나눈 나머지가
          제대로된 종료상태 값이다.

        [ 문제 ]
            - 현재 파이프 기능을 구현하고 있는데 실행한 외부 프로그램이 좀비 프로세스로 남아있는 것 같다.
            - 아마 부모 프로세스에서 정상적으로 회수를 안해서 그런 것 같다.

        ### wait
            - 자식 프로세스가 여러 개일 경우 아무 자식 프로세스나 종료하면 리턴한다.

        ### waiptpid
            - 특정 자식 프로세스가 종료하기를 기다린다.


[ 파이프 구현중 발견한 에러 ]

    bash 에서 파이프를 사용할때 각 명령어마다 subshell 이 생성된다고 한다.
    이 subshell 은 자식 프로세스이며 bash 와 동일한 환경에서 복제된 프로세스이다.
    이떄 파이프에 포함된 명령어들은 하나 실행되고 그 결과를 다음 명령어의 입력으로 받아오는 것이 아닌
    동시에 명령어들이 실행되는 와중에 앞 명령어의 출력을 입력으로 받는 상황이다.
    유닉스 시스템 프로그래밍에서 c pipe 함수는 단방향밖에 지원이 안되는 것으로 알고 있다.

    현재 상황은 자식 프로세스들 간에 파이프를 연결해주어 입력과 출력을 해주어야하는데
    이때 명령어의 개수가 고정되어 있지 않아 동적으로 추가시켜주어야 했다.
    파이프의 경우 두개의 프로세스당 하나의 파이프를 생성해주고 부모 프로세스에서
    fork 해서 프로세스를 생성하기 전에 pipe 를 생성해주는 식으로 구현하기로 했다.

Ex.
    cmd1 arg | cmd2 arg | cmd3 arg 인 경우
    자식 프로세스 3개를 생성한다. 
    cmd1 의 출력이 cmd2 의 입력으로 들어갈떄 필요한 pipe 한개
    cmd2 의 출력이 cmd3 의 읿력으로 들어간다.

    필요한 파이프 개수 : cmd 개수 - 1
    fork() 호출 개수 : cmd 개수
    write   read    pipe
    pro1    pro2    0
    pro2    pro3    1

    위와 같은 방식으로 코드를 구현해보았는데 grep, cat 같이 입력이 필요한
    프로그램의 경우 실행은 되지만 프로세스가 종료되지 않아 계속 자식 프로세스가 실행되어
    다음 명령어 입력을 받지 못하는 상황이 발생했다.
    디버깅을 해보았는데 알고보니 현재 로직 상에서 문제가 있었다.

    write_process() : 명령어 실행결과를 표준 출력에 넣어주기
    read_process()  : 표준 입력을 통해 이전에 출력한 결과 입력받고 명령어 실행

    ```
    if (idx == 1)               // case 1
    {
        write_process();        
    }
    else                        // case 2
    {
        read_process();         
        write_process();
    }
    ```

    idx 값을 통해 프로세스를 구분할 수 있었다.
        부모 프로세스에서만 fork 를 해야 자식의 자식 프로세스가 생성되지 않기 때문에
        반복문을 돌려 생성해주었는데 fork 함수를 호출하자마자 자식 프로세스가 생성되고 실행되기 떄문에
        이때 사용한 idx 값, 즉 반복 횟수는 각 프로세스마다 고유의 값을 가지게 된다 따라서
        어느 프로세스인지 getpid 함수를 사용하지 않아도 인식할 수 있었다.
    read_process 또는 write_process 함수를 호출하면 execve 함수를 호출해 외부 프로그램을 실행시켜주거나
    빌트인 명령어를 실행하고 자식 프로세스를 종료시켜 주는데 이때 case 2 에서 read_process() 에서
    exeve 나 exit 가 호출이되면 프로세스 자체가 끝나버리거나 다른 프로세스로 덮어지기 떄문에 이후 나오는
    write_process() 함수가 호출되지 않을 수 있었다.
    따라서 어차피 case 2 의 경우 실행할 프로세스는 동일하기 때문에 프로세스 실행 부분을 한번만 호출해주고
    통합해주었다.
    ```
    if (idx == 1)               // case 1
    {
        write_process();        
    }
    else                        // case 2
    {
       read_and_write_process();
    }
    ``` 

    - 기존 함수
    ```
    static void		write_process(int idx, int *pipe_fd, t_list *cur_node)
    {
        const char	*cmd;
        char		**cur_program;
        int			check_cmd_type;

        cur_program = get_cur_program(idx, cur_node);
        cmd = (const char*)cur_program[0];
        close(pipe_fd[0]);						// todo : error 처리
        if (pipe_fd[1] != 1)
        {
            close(1);
            dup2(pipe_fd[1], 1);				// todo : error 처리
            close(pipe_fd[1]);					// todo : error 처리
        }
        check_cmd_type = check_command_is_builtin(cmd);
        if (check_cmd_type)
        { /* TODO 12/4 : waitpid 및 프로세스의 리턴값에 대해 알아보고 보충하기 */
            exit(0);
        }
        else
            ft_execve(cur_program, envp);
    }
    ```

    - 수정후 함수
    ```
    static void		read_and_write_process(int idx, int **pipe_fd, t_list *cur_node, int pipe_elem_num)
    {
        const char	*cmd;
        char		**cur_program;
        int			check_cmd_type;

        cur_program = get_cur_program(idx, cur_node);
        cmd = (const char*)cur_program[0];
        close(pipe_fd[idx - 2][1]);
        if (pipe_fd[idx - 2][0] != 0)
        {
            close(0);
            dup2(pipe_fd[idx - 2][0], 0);
            close(pipe_fd[idx - 2][0]);
        }
        if (idx < pipe_elem_num)
        {
            close(pipe_fd[idx - 1][0]);						// todo : error 처리
            if (pipe_fd[idx - 1][1] != 1)
            {
                close(1);
                dup2(pipe_fd[idx - 1][1], 1);				// todo : error 처리
                close(pipe_fd[idx - 1][1]);					// todo : error 처리
            }
        }
        check_cmd_type = check_command_is_builtin(cmd);
        if (check_cmd_type)
        { /* TODO 12/4 : waitpid 및 프로세스의 리턴값에 대해 알아보고 보충하기 */
            exit(100);
        }
        else
            ft_execve(cur_program, envp);
    }
    ```

    수정해도 여전히 프로세스가 종료도지 않은 좀비 프로세스 상태 였다.

    알고보니 pipe 를 사용할때 필요하지 않은 pipe 들을 닫아주지 않으면 eof 를 리턴하지 않는다고 한다.
    grep, cat 같이 입력을 받는 프로그램의 경우 eof 를 만나야 종료되기 떄문에 현재 코드에서는
    프로세스에서 사용하지 않는 eof 도 닫아주어야 했다.

    현재 코드는 필요한 파이프들을 부모프로세스에서 모두 생성해준뒤 자식프로세스들을 fork 해주기 때문에
    자식프로세스에서 사용하지 않는 파이프가 있을 수 있어 닫아 주었다.
    또한 dup2 나 dup 를 통해 fd 를 복사해주면 하나는 닫아주어야 한다.
        Ex. 만약 fd 4 를 표준 입출력에 복사할 경우 dup2(fd4, stdout)
            stdout 은 fd4 가 가리키는 것을 같이 가리키기 때문에 더이상 fd4 가 필요없을 경우 닫아주어야한다.

    [ man 2 pipe 참고 ]
    - pipe 함수는 두개의 file descriptor(fd) 를 가지고 있는데 이 fd 들은 파이프의 양쪽 끝 이라고 생각하면 된다.
    - 커널은 파이프의 한쪽 끝인 write 로부터 다른 한쪽끝인 read 를 통해 읽어들인다.
    - 파이프는 모든 대응하는 fd 가 닫힐때까지 지속된다.
    - write fd 를 통해 데이터들을 넣은 다음에 닫아주어 EOF 를 전달해줘야한다.
    
        ### widowed
            끝이 닫힌 파이프를 widowed 되었다고 한다.
            이 파이프의 fd 에 프로세스가 데이터를 writing 하면 프로세스에게 SIGPIPE signal 을 받는다.
            읽는 쪽에 EOF 를 전달해서 pipe 가 닫혔음을 알려야한다.

    - SIGPIPE 시그널을 받게한다.
    - 그러면 read fd 는 EOF 를 만날때까지 읽는다고 한다.
    - 파이프와 관련된 fd 가 모두 닫힐때까지 유지된다고 한다.

    [ lsof 명령어 ]
    - list open files 의 약자
    - 시스템에서 열려있는 파일에 대한 정보를 출력해준다.
    - 여러 옵션을 지원해 특정 프로세스의 Pid 를 지정하여 볼 수 있다.

    [ pipe 실행 원리 ]
    - [참고 사이트](https://architectophile.tistory.com/9)
    - [참고 사이트](https://stackoverflow.com/questions/33884291/pipes-dup2-and-exec)
    - 파이프를 사용할때 가장 중요한 점은 파이프를 통해 생성된 fd 들을 프로세스들이 공유하는 것이 아닌
      자신만의 파일 디스크립터 테이블을 가진다고 한다.
    Ex.
        pipe 함수를 통해 생성한 파이프는 fd 4, 5 를 가진다고 하자.
        프로세스 A 에서 파이프의 fd 번호 5 를 통해 출력을 하면 프로세스 B 에서 파이프의 fd 번호 5 를 통해
        4 에서 출력받은 내용들을 입력으로 받는다.
    - 데이터를 다 쓰고 난 다음에는 사용한 fd 를 닫아주어 EOF 를 전달해 상대방 프로세스에게 데이터 전송이
      끝났음을 알려야 한다.

    [ 문제 해결 ]
    ->>>>>  현재 구조는 부모 프로세스에서 생성한 pipe 들의 fd 들을 똑같이 복사해서 자식 프로세스에서
            사용하는 구조인데 이떄 부모 프로세스에서 또한 동일한 파이프들을 가리키고 있는 상황이다.
            자식프로세스에서는 모두 닫아주었지만 부모 프로세스에서 안닫아주어 EOF 전달이 안되는 상황으로
            판단되어 해당 코드들을 추가해주니 정상적으로 작동돼었다.
