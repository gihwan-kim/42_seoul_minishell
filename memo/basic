- [출처](https://mug896.github.io/bash-shell/quotes.html)

# quote

    ## 기본내용

        ```
        123, "123", '123' 모두 스트링으로 인식
        공백으로 분리되는 여러 개의 스트링을 하나의 인수로 만들 때
        라인 개행이나 둘 이상의 공백을 유지하기 위해
        단어분리, globbing 발생을 방지하기 위해
        shell 키워드, 메타문자, alias 와 같이 shell 에서 특수기능을 하는 문자, 단어를 단순히 명령문의 스트링으로 만들기위해
        문자 그대로 스트링을 강조하기 위해
        !!! 명령이 실행될 때는 사용된 qutoe 가 제거된 후에 인수가 전달된다.
        ```

    ## 특수 기능을 갖는 문자

        - $ : 매개변수 확장, 산술확ㅑ장, 명령치환에 사용
        - ' : 명령치환 (mandatory 에서는 안씀)
        - ! : history 확장에 사용 (mandatory 에서는 안씀)

    ## 특수 기능을 갖는 문자나 단어를 escpae 하는 법
        ```
        \ 문자 사용
        quote 를 사용 하면 특수기능이 없어지고 단순히 스트링으로 사용
        ```

    ## no quotes
        - escape 하고 나면 \ 는 사라지는듯?
        - quote 가 없는 상태에서는 기본적으로 모든 문자가 escpae 된다.
        - shell 키워드, 메타문자, alias, glob, quote, whitespace 문자를 escpae 하여 해당기능을 차단할 수 있다.
            ```
            $ echo \a\b\c\d\ \!\@\$\%\^\&\*\(\)\{\}\[\]\<\>\/\\ ...     # no quotes
            abcd !@$%^&*(){}[]<>/\ ...

            $ echo "\a\b\c\d" ...        # double quotes
            \a\b\c\d ...

            $ echo '\a\b\c\d' ...        # single quotes
            \a\b\c\d
            ```

        - 명령행 상에서 공백은 인수를 구분하는데 사용한다.
        - 둘 이상의 공백은 의미가 없어 하나의 공백으로 대체
        - quote 가 없는 경우 공백도 escape 할 수 있다. -> 공백을 escpape 하면 두개의 인수가 하나가 된다.
        - escape 는 문자하나당 하나씩된다.
            ```
            \공백 o

            \공백공백 x

            다음과 같이 하면 \t \n 이 echo 명령에 전달되어 escape 문자가 처리된다.
            $ echo -e foo\\tbar\\n123
            foo    bar
            123
            ```

        - \ 문자를 escpae 할 수 있다.
            ```
            # no quotes 상태에서는 모든문자가 escape 되므로 'tr : n' 와 같아진다.
            # \ 는 n 을 Escpae
            $ echo 111:222:333 | tr : \n
            111n222n333

            # \ 는 \ 을 Escpae 해서 \n 이됨
            $ echo 111:222:333 | tr : \\n     # tr : '\n' 와 같은 결과
            111
            222
            333
            ```

        - " , ' quote 문자 escape 할 수 있다.
            ```
            $ echo double quotes \" , single quotes \'
            double quotes " , single quotes '
            ```

    ## Double quote (" ")

        - $ ` ! 특수기능을 하는 문자들이 해석되어 실행되고 공백과 개행이 유지
        - ", $, `, \, newline 인 특수기능을 가진 문자들을 \ 문자로 escpae 할 수 있다.
            escpae 하고나면 \ 는 사라진다.

            ```
            $ echo '\$ \` \\'      # single quotes
            \$ \` \\

            $ echo "\$ \` \\"      # double quotes
            $ ` \

            ```
    ## Single quotes ( ' ' )
        - 별다른 기능 없이 모든 문자를 있는 그대로 표시합니다. 
        - escape 도 되지 않습니다. 이 안에서 single quotes 을 사용하려면 뒤에 이어지는 $' ' 을 사용해야 합니다.

    ## Quote 들 간의 공백
    - quote 를 분리해서 작성하게 되면 중간의 공백들이 하나의 space 로 변경된다.

# Variables

    - 알파벳, 숫자, _ 로 만들 수 있음
    - 첫 문자로 숫자 불가능

    ## Variables states
        - 변수의 상태를 3 가지로 구분할 수 있다.

        1. 변수가 존재하지 않는 상태 또는 unset 상태
            - 변수에 값을 한번도 대입한 적이 없는 상태
            - 값을 할당하지 않고 선언만한 상태
        2. NULL 값인 상태
            - 변수가 존재하고 NULL 값인 상태
            ```
            AA=  AA=""  AA=''
            ```
        3. NULL 이외의 값을 가진 상태
    
    ## 값 구분

    ## 변수값으로 NUL 문자(\0) 저장 불가능

    ## Subshell 과 스크립트 파일에서는 현재 shell 의 변수 값을 변경 불가능
        - 현재 shell 과는 다른 프로세스에서 실행되고 있기 떄문

# Exit Status

    - 터미널에서는 명령을 단계적으로 실행해서 하나의 작업을 완성히기 위해서는 연속되는 명령들이 정상적으로 실행돼야 한다.
    - 앞선 명령이 정상적으로 실행을 완료 했는지 오류가 발생했느지 판단하는 방법이 종료 상태값을 사용하는 것

    - shell 에서 실행되는 모든 명령은 빠짐없이 종료 상태 값을 반환한다.
    
    - 정상 종료 : 0 리턴
    - 이외의 값 : 오류를 분류하는 용도로 사용
    - $? 변수를 통해 알아 볼 수 있다.

    ## 종료 상태 값 지정
        - 스크립트 파일이나 Subshell 은 프로세스가 새로 생성되는 것이므로 종료 상태값을 지정할때 exit 명령으로 한다.
        - unction 이나 source 명령으로 읽어들이는 경우에는 return 명령으로
        - 종료 상태 값을 지정하지 않으면 마지막으로 실행된 명령의 종료 상태 값이 사용

        0   : 정상종료
        1   : 일반적 에러
        2   : syntax error
        126 : 명령을 실행할 수 없음, 권한 문제 또는 실행할 수 없는 경우
        127 : 파일이 존재하지 않음, path 문제?
        128 + N : Signal N 에의한 종료, kill -9 PID 로 종료됐다면 $? 값은 139

    ## pipe 로 연결된 명령의 종료 상태 값
        - 마지막 명령의 종료 상태값이 사용된다.

# Subshells

    ## child process
        - 외부 명령을 실행할 경우
        - Shell 에서 명령을 실행하면 새로운 프로세스가 생성되어 실행된다.
            명령을 호출한 process 가 parent, 새로 실행되는 명령이 child process
    ## bash child process
        - 스크립트 파일을 만들어서 실행시킬경우
            bash child process 가 하나 더 생성되고 그 아래서 스크립트 파일의 명령이 실행된다.
    ## Subshell
        - shell script 파일을 실행한 것도 아닌데 bash child process 가 하나더 생성되고 명령어가 실행됨
        - ( ) $( ) ` ` | & 를 이용해서 실행될때 bash child process 가 하나 더 생성되고 그 아래서 명령이 실행된다.

    ## Process Creation

        ### Process 생성 단계

        1. ls 명령 실행
        2. fork 
            - 유닉스에서 새로운 프로세스를 만드는 방법
            - 현재 프로세스와 동일한 주소 공간을 갖는 프로세스를 생성 
                현재 bash shell 과 동일한 환경
                export 하지 않은 변수, 함수들도 사용할 수 있음
            - subshell 상태임!!
        3. exec 단계 : exec ls
            - 새로운 프로세스가 생성된 상태에서 기존 프로그램의 주소공간을 삭제하고 새로 실행될 프로그램을 메모리로 로드하여 실행
            - 기존 bash 프로그램 주소공간이 exec 에 의해 ls 프로그램 주소공간으로 대체됨
                기존 bash 에서 사용하던 변수, 프로그램들을 사용할 수 없게됨
            - exec 함수를 실행할때 환경변수를 인수로 전달 해서 child process 에서 사용할 수 이게됨
        4. exit 단계
            - child 프로세스가 exit 함수를 실행하면 자신이 사용하던 모든 자원을 해제하고 종료하게 된다.
            - 종료 상태 값을 PCB 항목에 설정한다. -> wait 함수를 통해 값을 얻을 수 있음

        5. continue

    ## Thread

# Commands

    - 명령을 찾는 우선순위 : 는 alias, keyword, function, builtin, 외부 명령 순

    ## 외부 명령
        - /usr/bin/find 명령 같이 시스템 디렉토리에 위치한 명령

    ## shell Builtins
        - shell 에 builtin 돼서 제공되는 명령
        - 새로 프로세스를 만들지 않아도 된다.
        - shell 내부 상태 정보를 조회, 변경할 수 있다.
    
    ## Compound Commands
        - redirection, pipe 를 붙여 사용할 수 있다.
        
        ### 명령들을 구성할 수 있는 방법

            1. 한줄에 하나씩
                ```
                command1
                command2
                command3
                ...
                ```
            2. ;  문자를 이용해서 안줄에 여러 명령
                ```
                command1; command2; command3 ...
                ```
                - ; 문자는 newline 과 같은 역할
                - 명령이 순서대로 진행됨
                - 종료되어야 다음 명령어가 실행

                    ```
                    sleep 10 ; sleep 9 ; sleep 5;
                    1. sleep 10
                    \-+= 29888 gihkim bash
                        \--= 33748 gihkim sleep 10

                    2. sleep 9
                    \-+= 29888 gihkim bash
                        \--= 33764 gihkim sleep 9

                    3. sleep 5
                    \-+= 29888 gihkim bash
                        \--= 33769 gihkim sleep 5
                    
                    ```

            3. 파이프를 이용해 여려 명령을 동시에 실행
                ```
                command1 | command2 | command3
                ```
                - 파이프에 연결된 명령들은 동시에 실행된다.
                     ```
                    sleep 10 | sleep 9 | sleep 5;

                    \-+= 29888 gihkim bash
                        |--= 33696 gihkim sleep 10
                        |--- 33697 gihkim sleep 9
                        \--- 33698 gihkim sleep 5
                    ```
                    command1 의 stdout 출력이 command2 의 stdin 입력으로 들어가고 
                    command2 의 stdout 출력이 command3 의 stdin 입력으로 들어가고 
                    최종적으로 command3 의 stdout 출력이 터미널로 표시

                    ->  command1 의 실행결과가 command2 의 입력으로 들어간다고 하지만 실제로는 아님
                        파이프로 연결된 프로그램들이 실행될떄는 동시에 실행된다.
                        command2 가 먼저 종료될 수도 있음
                    
                    ->  파이프로 연결된 명령들은 $? 변수로 이전 명령의 종료 상태값을 확인할 수 없다.
                        종료상태 값은 마지막 명령의 종료 상태 값이 된다.
                        -> waitpid() 사용


                    ->  파이프로 연결된 명령들은 process group 을 형셩한다.
                        여러 명령들을 동시에 실행 시키면 process group 이 만들어진다.
                        첫번째 명령이 PGID (Process group ID)가 된다.
                        -> fork 밖에 사용할 수 없어서 pgid 는 부모 프로세스 밖에 안될듯.
                        -> pstree 를 통해 프로세스 계층 구조를 알 수 있다.
                            pstree -p PID
                            이때 맥에서 '-' 문자 대신 '=' 문자로 돼있는 프로세스는 프로세스 그룹 리더이다.


                    표준에러의 경우 모두 터미널로 연결되어 있다. 
                    -> 명령이 파이프로 연결되어있더라도 stderr 로 출력을 하면 파이프로 전달되지 않고 터미널로 표시됨

                관련함수
                    - pipe
                        #include <unistd.h>
                        int pipe(int pipefd[2]);

                        프로세스 끼리 데이터를 주고받을 수 있도록 해줌
                        하나의 파이프 및 파이프를 참조하는 두 개의 파일 디스크립터 생성
                        하나의 파이프(단 방향 데이터 채녈)를 프로세스들이 공유한다.

                        pipefd[0] : 함수 호출 후 fd[0] 에 데이터를 입력 받을 수 있는 파일 디스크립터
                        pipefd[1] : 함수 호출 후 fd[1] 에 데이터를 출력할 수 있는 파일 디스크립터
                        성공 : 0 리턴
                        실패 : -1 리턴
                    
                    - dup
                        https://ehclub.co.kr/1321

                        #include <unistd.h>
                        int dup(int oldfd);

                        oldfd 에대한 복사본 파일 디스크립터를 생성한다.
                        oldfd 로 열려진 파일 디스크립터를 전달하면 같은 파일을 연 새로운 파일 디스크립터를 반환한다.
                        oldfd 와 리턴 값은 같은 파일을 참조하게 됨

                    - dup2
                        int dup2(int oldfd, int newfd);

                        첫 번째 인자로 열려진 파일 디스크립터를 전달하고 두 번째 인자로 파일 디스크립터를 전달하면
                        newfd 도 oldfd 가 참조하는 것을 같이 참조한다.
                        newfd 가 이미 열려진 파일 디스크립터일 경우 해당 꺼를 닫고 복제한다.
                        
                        파일을 표준 출력으로 사용할 때 많이 사용한다.

                    - fork
                        #include <sys/type.h>
                        #include <unistd.h>
                        pid_t fokr(void);

                        호출 성공시 
                            부모프로세스 : 자식프로세스의 id
                            자식프로세스 : 0
                        호출 실패시
                            -1 리턴

                    - waitpid
                        ```
                        #include <sys/types.h>
                        #include <sys/wait.h>
                        pid_t waitpid(pid_t pid, int *stat_loc, int options);
                        ```
                        pdix : 종료를 기다리는 ㅔid
                        stat_loc : 종료 상태 값을 저장할 주소
                        options : waitpid 함수의 리턴 조건
                            Ex.
                                WNOHANG : 부모프로세스가 자식프로세스를 기다리지 않고 자기할일 하도록
                                0       : 부모프로세스가 자식 프로세스를 기다림, wiat 함수와 같음
                    !!ls | echo 가 안먹는 이유
                        echo 는 stdin 을 받지 않기 떄문


                계획
                    pstree 를 통해 확인할 수 있다.

                구현.
                    command1 | command2

                    
                    parent 프로세스에서 pipe 시스템 콜을 이용해 파이프 생성
                    command1 에 해당하는 child process 에서 

    ## 우선순위
        - 파이프보다는 리다이렉션이 우선순위가 더 높음
# Internal Commands and Builtins
    - [참고](http://wiki.kldp.org/HOWTO/html/Adv-Bash-Scr-HOWTO/internal.html)

    - builtin 은 bash 에 포함된 명령어
    - 시스템 명령어와 이름이 같을 수도 있지만 bash 가 내부적으로 다시 구현해 놓은 것
        > 예를 들어, 하는 일이 거의 동일한 bash의 echo는 /bin/echo와 다릅니다.

# 메모리 동적할당 수명
    malloc(byte)    : byte 수 만큼 메모리를 할당하고 메모리 블록의 첫번쨰 주소를 리턴한다. 
    free()          : malloc() 이 리턴했던 주소를 인자로 사용하여 할당했던 메모리를 해제한다.
    할당된 메모리의 수명 : malloc() 이 호출되어 메모리가 할당된 시점 부터 free() 를 호출하여 해제할떄 까지 
    => 일부 운영체제는 자동으로 할당된 메모리를 해제할 수도 있지만 모든 운영체제가 해제해주는 것은 아니다. 

# 표준 스트림 

- [위키: 표준 스트림](https://ko.wikipedia.org/wiki/%ED%91%9C%EC%A4%80_%EC%8A%A4%ED%8A%B8%EB%A6%BC#%ED%91%9C%EC%A4%80_%EC%98%A4%EB%A5%98_(stderr))
> 표준 스트림(standard streams)은 특정한 프로그래밍 언어 인터페이스뿐 아니라 
> 유닉스 및 유닉스 계열 운영 체제(어느 정도까지는 윈도에도 해당함)에서 
> 컴퓨터 프로그램과 그 환경(일반적으로 단말기) 사이에 [ 미리 연결된 입출력 통로 ] 를 가리킨디.

- 표준 입력, 표준 출력, 표준 에러 스트림 3개가 사용자의 터미널에 부착된다.
- 시스템 콘솔의 키보드와 모니터에서의 입출력을 추상화 한 것
- 자식 프로세스에 상속된다. 
    ### 표준 입력
        - 프로그램은 read 명령을 이용하여 데이터 전송을 요청한다. 
    ### 표준 출력 (stdout)
        - 프로그램은 write 명령을 이용하여 데이터 전송을 요청한다
    ### 표준 오류 (stderr)
        - 표준 오류는 프로그램이 오류 메시지나 진단을 출력하기 위해 일반적으로 쓰이는 또다른 출력 스트림이다.
# ctrl + c, ctrl + d, ctrl + \ 구현

## Signal and Traps

    ### 시그널이란? 
        - 시그널은 프로세스에 뭔가 발생 했음을 알리는 간단한 메시지를 비동기적으로 보내는 것이다.
            > 다른일을 하며 해당 이벤트가 발생하면 어떤일을 함.
            > 동기적 : 해당 이벤트가 발생할 때까지 기다림.
        - 무엇이 발생했는지를 표시하는 미리 정의된 상수를 사용한다.

            1. 시그널 발생경우 
                - 프로그램에서 예외적인 상황 발생 : 0 으로 나누기
                - 시그널을 보내는 함수를 사용해 다른 프로세스에 시그널을 보내는 경우
                - 인터럽트 키를 입력한 경우
                    인터럽트
                        > 마이크로프로세서에서 인터럽트(interrupt, 문화어: 중단, 새치기)란
                        > 마이크로프로세서(CPU)가 프로그램을 실행하고 있을 때, 입출력 하드웨어 등의
                        > 장치나 또는 예외상황이 발생하여 처리가 필요할 경우에 마이크로프로세서에게
                        > 알려 처리할 수 있도록 하는 것을 말한다
                    Ex. ctrl + c 같은 인터럽트 키
            2. 시그널 처리 방법의 종류
                - 받은 시그널의 기본 동작을 수행한다.
                    > 각 시그널에는 기본 동작이 지정돼있다. 
                        Ex. 프로세스 종료, 시그널 무시, 일시 중지, 재시작 등
                - 받은 시그널을 무시한다.
                    > 프로세스에 시그널을 전달하지 않는다.
                - 시그널 핸들러(= 함수)를 지정할 수 있다. 
                    > 시그널 핸들러의 동작이 완료되면 기존 작업을 계속 수행한다.
                - 특정 부분이 실행되는 동안 시그널이 발생하지 않도록 할 수 있다.

            3. 시그널의 종류 

                시그널      번호    기본 처리       발생 요건
                SIGINT      2       종료            인터럽트, 사용자가 ctrl + C 입력시 발생
                SIGQUIT     3       코어 덤프       종료신호, 사용자가 ctrl + \ 입력시 발생
                SIGSTP      24      중지            사용자가 ctrl + z 로 중지할 떄 발생

                - 종료 : 프로세스가 종료되는 것
                - 코어 덤프 : 코어 파일을 만들고 종료하는 것

                ### 코어 덤프
                - 코어덤프, 시스템 덤프, 메모리 덤프 : 프로그램이 실행중에 작업중이던 특정 시점의 메모리 상태를 기록한 것
                - 코어 덤프는 프로그램 오류 진단과 디버깅에 쓰인다
        - 시그널 또한 자식프로세스에 상속된다.


## ctrl + c 구현 : bash, minishell 
    - SIGINT 인터럽트를 프로세스에 보냅니다 (일반적으로 프로세스가 종료됩니다)

    ### 현재 상황
    - ctrl +  c 일경우 SIGINT 로 해당 시그널을 무시하도록 해놨는데 bash 의 경우 입력을 다시 받는 기능이 있어
      signal() 함수를 사용하여 ctrl + C 에 해당하는 시그널인 SIGINT 에 대한 핸들러 함수를 구현해두었다.
    ```
    void handler(int signo)
    {
        (void)signo;
        write(1, "\b\b  \n", 7);
        prompt();
    }
    ```

## Ctrl + d 구현 : bash, minishell
    - EOF(end-of-file) 마커를 보냅니다.
    - 쉘에 입력될 경우 쉘을 종료합니다.

    => EOF 를 보내기 때문에 gnl 은 0 을 리턴하게 된다.
        리턴 값이 0 이고 빈 문자열 "\0" 일 경우 프로세스를 종료하도록 구현하였다. 
        ```
        if (!get_next_line(0, &line) && !ft_strlen(line))	// ctrl + d
		{
			g_signal = 0;
			ft_putendl_fd("exit", STDERR_FILENO);
			exit(BASH_SUCCESS);
		}
        ```
## SIGTERM : bash, minishell
    시그널      번호    기본 처리       발생 요건
    SIGTERM      15       종료          소프트웨어적 종료
    - bash 는 SIGTERM 을 무시한다.


## Operating System scheduling
- 실행되는 모든 프로세스는 CPU 의 관점에서 2가지 상태를 오가며 실행된다.
    1. 실제 CPU instruction 을 실행하는 상태 (cpu burst)
    2. I/O 를 위해서 wait 하는 상태 (I/O burst)
        Ex. porcess A 가 wait 상태가 되면 CPU 는 idle 상태가 되어 OS 스케쥴러에 의해 porcess B 로 실행이 변경된다. 
    ### context switching
        - CPU 의 실행이 process A 에서 process B 로 변경되늰 것
        - process A 의 상태 값이 백업되고 이전의 저장된 process B 의 상태 값을 불러와 실행한다. 

    ### 프로세스의 상태
        1. new
        2. ready
        3. running
        4. waiting
        5. terminated

    ### Signal handler
        - 시그널과 하드웨어 인터럽트의 차이점 
            > 시그널은 유저모드에서 사용자 프로그램에 의해서도 처리되는데
            > 인터럽트는 커널 모드에서 OS 에 의해 처리된다.