
# 명령문 파싱과정
    1. 명령문 작성후 enter 
        줄 단위로 읽어온다. (gnl)
        \ 문자로 끝날 경우 다른 줄을 읽어들이도록 기다렸다가 추가로 입력한 줄을 추가시킴
        -> 구현안해도될듯
    2. 명령문을 단어들로 분리    
        키워드, 메타문자, 대입연산, quotes, \ 문자를 이요한 escpae 처리
        2-1. quote 처리
            quote 찾기
                첫번째 quote 를 찾는다면 동일한 다음 따옴표를 찾을때까지 모든 문자에 대해 quote 상태로 인식
                    "" : $ " ` \ 문자들을 제외하고 기능을 잃게됨, ' 포함
                    '' : 모든 문자는 기능을 잃음, \ 또한 기능을 잃어서 single quote 의 기능을 못 잃게함
                            ex.
                                $ echo 'Don\'t do this'
                                >
                                (\' 일 경우 원래 ' 문자가 되는데 \ 의 기능을 잃었으니 그냥 ' 가 홀수개 되서 입력 더 받게됨)
                                -> 원래는 다시 1번 명령어 작성으로 돌아가는데 minishell 은 구현 x
        2-2. quote 제거
                어떤 문자들을 escape 할지 알기 때문에 2-1 을 결정하는데 사용된 quote 들을 삭제한다.
                    Step Input:
                        echo "What's your name?"

                    Step Output:
                        echo What's your name?
                
                --> 삭제하지 말고 일단 두기
        2-3. 읽은 데이터를 명령어들로 쪼개기
            ; 를 구분자로해서 명령들을 분할하기
            이전 단계에서 quote 되거나 escpae 된 문자들은 의미를 가지지 않으며 명령 분할에 사용되지 않음
                Step Input:
                    read name; echo $name

                Step Output:
                    read name

                    and

                    echo $name
-- 아래 부터는 분할한 각 명령어 별로 실행되는 단계 --
    3. 특별한 연산자 분석
        {..}, <(..), < ..., <<< .., .. | .., 와 같은 특별한 연산자가 있는지 확인한다.


    4. 해석할 표현식이 있을 경우 변수확장, 산술확장, 명령치환을 거쳐 최종 명령문을 만듬
        4-1. Brace expansion (= 괄호확장)
                괄호 구현안하니까 패스
        4-2. Tilde expansion
                ~ 문자를 이용해 디렉토리 정보 표시 구현안할 꺼니까 패스
        4-3. 다음 4 개는 left-to-right 순서로 동시에 처리 됩니다.
                Parameter expansion (매개변수 확장)
                    ex1) AA=cde , AA 라는 변수를 만들고 cde 값을 지정해본다.
                            $ 문자를 사용해서 변수 이름 앞에 붙여 구분한다.
                            "ab$AAfg" 와 같이 사용한다면 변수 'AA' 가 아닌 'AAfg' 로 인식하게 된다.
                            'AAfg' 는 아직 등록안해서 null 로 나온다.
                            -> 여기는 구현!

                            -> 앞에서 quote 제거를 하면 $ 가 문자로 적용되는지 아닌지 어떻게 확인하지?
                    ex2) 나머지와 구분하기 위해 { } 를 사용한다.
                            -> 중괄호({}) 는 구현안할꺼같다.
                Arithmetic expansion (산술연산 확장)
                    구현안할 꺼임
                Command substitution (명령치환)
                        $( <COMMANDS> )
                        `<COMMANDS>`
                Process substitution
                        <( <COMMANDS> )
                        >( <COMMANDS> )
     5. Word splitting (명령을 명령어 이름과 인자로 분할)
                - 첫 단어 : 명령어 이름
                - 나머지  : 인자
                - shell 은 변수의 값을 표시할 때 IFS 변수에 설정되어있는 값을 이용해 단어를 분리
                - 기본 값은 whitespace
                - whitespace 를 기준으로 분리하고 나면 whitespace(space, tab, newline) 는 제거되고 남은 거는 단어라고 부름
                - 변수를 quote 하면 단어분리는 발생하지 않는다.
                    ex.
                        aa="echo hi"
                        "$aa" 이렇게 quote 하면 "echo hi" 문자열이 됨
                        $aa 이렇게 사용하면 ifs 에 따라 단어 분리가 되어 echo hi 
                - Ex
                Step Input:
                    echo "/home/lhunath/docs has these files that match *.txt :" bar.txt foo.txt

                Step Output:
                    Command Name: 'echo'
                    Argument 1: '/home/lhunath/docs has these files that match *.txt :'
                    Argument 2: 'bar.txt'
                    Argument 3: 'foo.txt'
    6. 실행
        - 명령어 이름과 인자로 구분된 명령을 bash 가 실행한다.
        - 명령이 함수 또는 builtin 일 경우 명령은 동일한 bash process 에서 실행된다.
        - 이외의 경우는 fork 해서 새로운 bash process 를 생성하고 이 명령에서 분석된 설정 (리다이렉션들, 인자들 등등) 으로 
          새로운 process 를 초기화하고 생성한 프로세스에서 명령을 실행한다.
            -> 부모는 명령을 완료되기를 기다린다.
          Ex.
            Step Input:
                sleep 5

            Causes:
                ├┬· 33321 lhunath -bash
                │├──· 46931 lhunath sleep 5
        -> 이 단계이후 다음 명령 또는 다음 줄이 진행됨 다끝나면 실행했던 마지막 명령의 exit code 를 리턴
